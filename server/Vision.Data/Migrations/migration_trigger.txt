            UP:
            
            // Criar a função que vai enviar a notificação
            migrationBuilder.Sql(@"
                CREATE OR REPLACE FUNCTION notify_camera_is_requested() 
                RETURNS TRIGGER AS $$
                BEGIN
                    IF OLD.""IsRequested"" IS DISTINCT FROM NEW.""IsRequested"" THEN
                        PERFORM pg_notify('camera_is_requested', NEW.""Id""::text);
                    END IF;
                    RETURN NEW;
                END;
                $$ LANGUAGE plpgsql;
            ");

            // Criar a trigger que chama a função ao atualizar ou inserir dados na tabela Camera
            migrationBuilder.Sql(@"
                CREATE TRIGGER camera_is_requested_trigger
                AFTER UPDATE ON ""Cameras""
                FOR EACH ROW EXECUTE FUNCTION notify_camera_is_requested();
            ");

            //migrationBuilder.Sql(@"
            //    INSERT INTO ""AspNetUsers"" (""Id"", ""UserName"", ""NormalizedUserName"", ""Email"", ""NormalizedEmail"", ""EmailConfirmed"", ""PasswordHash"", ""SecurityStamp"", ""ConcurrencyStamp"", ""PhoneNumberConfirmed"", ""TwoFactorEnabled"", ""LockoutEnabled"", ""AccessFailedCount"") 
            //    VALUES (uuid_generate_v4(), 'admin', 'ADMIN', 'admin@visionserver.com', 'ADMIN@VISIONSERVER.COM', true, 'HASH_DA_SENHA', 'SECURITY_STAMP', 'CONCURRENCY_STAMP', false, false, true, 0)
            //    ON CONFLICT DO NOTHING;
            //");


            Down:

            migrationBuilder.Sql(@"DROP TRIGGER IF EXISTS camera_is_requested_trigger ON ""Cameras"";");

            migrationBuilder.Sql(@"DROP FUNCTION IF EXISTS notify_camera_is_requested;");

            //migrationBuilder.Sql(@"DELETE FROM ""AspNetUsers"" WHERE ""UserName"" = 'admin';");